@page "/calendar"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using MedicalBookingService.Shared.Models.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProvider
@inject DialogService DialogService

<h3>Appointment Calendar</h3>

<RadzenScheduler Data="@appointments"
                 TItem="AppointmentDto"
                 SlotRender=@OnSlotRender
                 SlotSelect=@OnSlotSelect
                 StartProperty="Start"
                 EndProperty="End"
                 TextProperty="Title"
                 SlotDuration="30"
                 AllowSwitchView="true"
                 AllowNavigate="true"
                 Views="@views"
                 Style="height: 700px;"
                 Grouped="false"
                 AppointmentRender="@(args => OnRenderAppointment(args))" >
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

@code {
    private List<AppointmentDto> appointments = new();
    private string currentView = "SchedulerView.Week";
    private IEnumerable<string> views = new[] { "Day", "Week", "Month" };

    protected override async Task OnInitializedAsync()
    {
        await LoadAppointmentsAsync();
    }

    private async Task LoadAppointmentsAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true) return;

        var role = user.FindFirst("role")?.Value;
        var userId = user.FindFirst("sub")?.Value;

        var url = role switch
        {
            "Patient" => $"api/appointments/patient/{userId}",
            "Doctor" => $"api/appointments/doctor/{userId}",
            "Admin" => $"api/appointments/admin/{userId}",
            _ => null
        };

        if (url is null) return;

        appointments = await Http.GetFromJsonAsync<List<AppointmentDto>>(url) ?? new();
    }

    private void OnRenderAppointment(SchedulerAppointmentRenderEventArgs<AppointmentDto> args)
    {
        // Give a color based on role or type (adjust as needed)
        args.Attributes["style"] = "background-color: #007bff; color: white; border-radius: 4px; padding: 4px;";
    }

    private void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Highlight working hours (9 AM – 5 PM)
        if ((args.View.Text == "Week" || args.View.Text == "Day") &&
            args.Start.Hour >= 9 && args.Start.Hour < 17)
        {
            args.Attributes["style"] = "background-color: rgba(200, 240, 255, 0.4);"; // light blue tint
        }
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        // if (args.View.Text != "Year")
        // {
        //     Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
        //         new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        //     if (data != null)
        //     {
        //         appointments.Add(data);
        //         Either call the Reload method or reassign the Data property of the Scheduler
        //         await scheduler.Reload();
        //     }
        // }
    }

}
