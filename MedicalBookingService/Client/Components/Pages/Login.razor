@page "/login"
@rendermode InteractiveServer
@inject MedicalBookingService.Shared.Services.AuthService AuthService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject HttpClient Http

<h3>Login</h3>

<LoadingSpinner Id="loader" />

<form @onsubmit="HandleLogin">
    <div id="errorMessage" class="alert alert-danger" style="display: none;"></div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input id="email" name="email" type="email" class="form-control" required />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input id="password" name="password" type="password" class="form-control" required />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</form>

@code {
    private async Task HandleLogin()
    {
        await JS.InvokeVoidAsync("startSpinner");

        var email = await JS.InvokeAsync<string>("getInputValue", "email");
        var password = await JS.InvokeAsync<string>("getInputValue", "password");

        var payload = new
        {
            Email = email,
            Password = password
        };


        try
        {
            var result = await JS.InvokeAsync<LoginResponse>("loginFunctionApi", email, password);

            if (result.Status == 200 || result.Status == 201)
            {
                await AuthService.InitializeAsync();
                Navigation.NavigateTo("/Dashboard", forceLoad: true);
            }
            else
            {
                await JS.InvokeVoidAsync("showErrorMessage", "Invalid credentials.");
            }
        }
        catch
        {
            await JS.InvokeVoidAsync("showErrorMessage", "Something went wrong. Please try again.");
        }
        finally
        {
            await JS.InvokeVoidAsync("stopSpinner");
        }
    }

    private class LoginResponse
    {
        public int Status { get; set; }
        public string Data { get; set; } = string.Empty;
    }
}
