@page "/patient-profile/{UserId}"
@using MedicalBookingService.Shared.Models.DTOs
@inject HttpClient Http

<div class="mt-4">
	<h3 class="text-center mb-4">Patient Profile</h3>

	@if (Patient == null)
	{
		<div class="alert alert-danger">Unable to load patient profile.</div>
	}
	else
	{
		<div class="card shadow-sm p-4">
			<div class="row mb-3">
				<div class="col-md-6">
					<strong>First Name:</strong> @Patient.FirstName
				</div>
				<div class="col-md-6">
					<strong>Last Name:</strong> @Patient.LastName
				</div>
			</div>

			<div class="row mb-3">
				<div class="col-md-6">
					<strong>Date of Birth:</strong> @Patient.DateOfBirth.ToString("MMMM dd, yyyy")
				</div>
				<div class="col-md-6">
					<strong>SSN:</strong> @MaskSsn(Patient.SSN)
				</div>
			</div>

			<div class="row mb-3">
				<div class="col-md-6">
					<strong>Phone Number:</strong> @Patient.PhoneNumber
				</div>
				<div class="col-md-6">
					<strong>Address:</strong> @Patient.Address
				</div>
			</div>

			<div class="mb-3">
				<strong>Email:</strong> @Patient.Email
			</div>

			@if (!string.IsNullOrEmpty(GovernmentIdPreviewUrl))
			{
				<div class="mb-2">
					<strong>Government ID:</strong>
					<a href="@GovernmentIdPreviewUrl" target="_blank">View and Download</a>
				</div>
			}

			@if (!string.IsNullOrEmpty(InsuranceCardPreviewUrl))
			{
				<div class="mb-2">
					<strong>Insurance Card:</strong>
					<a href="@InsuranceCardPreviewUrl" target="_blank">View and Download</a>
				</div>
			}
		</div>
	}
</div>

@code {
	[Parameter]
	public string UserId { get; set; }
	PatientProfileDto Patient;
	private string? GovernmentIdPreviewUrl;

	private string? InsuranceCardPreviewUrl;

	protected override async Task OnInitializedAsync()
	{
		Patient = await Http.GetFromJsonAsync<PatientProfileDto>($"api/account/patient-profile/{UserId}");

		if (!string.IsNullOrEmpty(Patient.GovernmentIdUrl))
		{
			GovernmentIdPreviewUrl = await Http.GetStringAsync($"api/file/preview/{Patient.GovernmentIdUrl}");
		}

		if (!string.IsNullOrEmpty(Patient.InsuranceCardUrl))
		{
			InsuranceCardPreviewUrl = await Http.GetStringAsync($"api/file/preview/{Patient.InsuranceCardUrl}");
		}
	}

	private string MaskSsn(string ssn) =>
	string.IsNullOrEmpty(ssn) || ssn.Length < 4 ? "••••" : $"•••-••-{ssn[^4..]}";
}
